{% extends "layout.jinja" %}

{% block metatags %}
{% endblock metatags %}

{% block headers %}
    <style>
        /* Additional styling for mobile responsiveness */
        .fc-toolbar-title {
            font-size: 1.25rem; /* Adjust title size for mobile */
        }
        .fc-prev-button, .fc-next-button {
            font-size: 0.9rem; /* Adjust button size for mobile */
        }
        @media (max-width: 768px) {
            .fc-toolbar { 
                flex-wrap: wrap; /* Allow toolbar to wrap on smaller screens */
            }
            .fc-toolbar .fc-button-group {
                margin-bottom: 10px; /* Add space between toolbar buttons */
            }
        }
    </style>
{% endblock headers %}

{% block content %}
<hr class="nav-separator">
<div id='calendar' class="container calendar-container"></div>
{% endblock content %}

{% block js %}
    <!-- Load FullCalendar -->
    <script src='https://cdn.jsdelivr.net/npm/fullcalendar@6.1.15/index.global.min.js'></script>
    <!-- Load ical.js for parsing the .ics file -->
    <script src='https://cdn.jsdelivr.net/npm/ical.js@1.4.0/build/ical.min.js'></script>

    <script defer async>
    document.addEventListener('DOMContentLoaded', function() {
        var calendarEl = document.getElementById('calendar');

        // Determine the initial view based on the screen size
        var initialView = window.innerWidth < 768 ? 'dayGridDay' : 'timeGridWeek';

        var calendar = new FullCalendar.Calendar(calendarEl, {
            initialView: initialView,
            headerToolbar: {
                left: 'prev,next today',
                center: 'title',
                right: 'dayGridMonth,timeGridWeek,dayGridDay'
            },
            events: [], // We'll load events dynamically below
            // Responsive behavior
            windowResize: function(view) {
                if (window.innerWidth < 768) {
                    calendar.changeView('dayGridDay');
                } else {
                    calendar.changeView('timeGridWeek');
                }
            },
        });

        // Function to fetch and parse an ICS file
        function fetchAndParseICS(url, cutoffDate, callback) {
            fetch(url)
                .then(response => response.text())
                .then(data => {
                    const jcalData = ICAL.parse(data);
                    const comp = new ICAL.Component(jcalData);
                    const vevents = comp.getAllSubcomponents('vevent');
                    const events = [];

                    vevents.forEach(vevent => {
                        const event = new ICAL.Event(vevent);

                        // Handle recurring events
                        if (event.isRecurring()) {
                            const expand = new ICAL.RecurExpansion({
                                component: vevent,
                                dtstart: event.startDate
                            });

                            while (expand.next() && expand.last.toJSDate() <= cutoffDate) {
                                events.push({
                                    title: event.summary,
                                    start: expand.last.toJSDate(),
                                    end: new Date(expand.last.toJSDate().getTime() + (event.endDate.toJSDate() - event.startDate.toJSDate())),
                                    allDay: event.startDate.isDate
                                });
                            }
                        } else {
                            const eventEndDate = event.endDate ? event.endDate.toJSDate() : event.startDate.toJSDate();
                            if (eventEndDate <= cutoffDate) {
                                events.push({
                                    title: event.summary,
                                    start: event.startDate.toJSDate(),
                                    end: eventEndDate,
                                    allDay: event.startDate.isDate
                                });
                            }
                        }
                    });

                    callback(events);
                })
                .catch(error => {
                    console.error('Error fetching or parsing .ics file:', error);
                });
        }

        // Define a cutoff date 8 weeks from now
        const cutoffDate = new Date();
        cutoffDate.setDate(cutoffDate.getDate() + (8 * 7));

        // Fetch and parse the first calendar
        fetchAndParseICS('/proxy-calendar-public', cutoffDate, function(events) {
            calendar.addEventSource(events);
        });

        // Fetch and parse the second calendar
        fetchAndParseICS('/proxy-calendar-private', cutoffDate, function(events) {
            calendar.addEventSource(events);
        });

        calendar.render();
    });
    </script>
{% endblock js %}
