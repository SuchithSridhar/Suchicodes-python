{% extends "layout.jinja" %}

{% block content %}
  <div class="container">

    <table class="table">
    <thead>
        <tr>
        <th scope="col">Date</th>
        <th scope="col">IP</th>
        <th scope="col">Subject</th>
        <th scope="col">Message</th>
        </tr>
    </thead>
    <tbody>
      {% for message in data.items %}
        <tr class='message-row' data-id="{{message.id}}" >
          <td>{{message.date}}</td>
          <td>{{message.ip}}<br><button data-ip="{{message.ip}}" data-id="{{message.id}}" class="block-button btn btn-secondary">Block</button></td>
          <td data-type="message-subject">{{message.subject}}</td>
          <td data-type="message-body">{{message.message}}</td>
        </tr>
      {% endfor %}
    </tbody>
    </table>

    <div class=pagination>
      {% for page in data.iter_pages() %}
        {% if page %}
          {% if page != data.page %}
            <a class="btn m-1 btn-primary" href="{{ url_for('admin.messages', page=page) }}">{{ page }}</a>
          {% else %}
            <a class="btn m-1 btn-dark">{{ page }}</a>
          {% endif %}
        {% else %}
          <span class=ellipsis>â€¦</span>
        {% endif %}
      {% endfor %}
    </div>

    <center>
      <label for="block-message">Block Message:</label>
      <input id='block-message' type="text">
      <button class="block-message btn btn-secondary">Block</button>
    </center>
  </div>
{% endblock content %}


{% block js %}

<script>

function extractDomains(text) {
    // Regular expression to match domain names ending with .info, .com, .net, or .org
    const domainPattern = /\b([a-zA-Z0-9.-]+(?:\.info|\.com|\.net|\.org))\b/g;

    const httpPattern =  /https?:\/\/(?:www\.)?([-a-zA-Z0-9@:%._\+~#=]{2,256}\.[a-z]{2,6}\b)(?:[-a-zA-Z0-9@:%_\+.~#?&//=]*)/g;
    
    // Domains to exclude
    const excludeList = ["suchicodes.com", "google.com"];
    
    let domains = [];
    let match;

    // Extract domains
    while ((match = domainPattern.exec(text)) !== null) {
        domains.push(match[1]);
    }

    while ((match = httpPattern.exec(text)) !== null) {
        domains.push(match[1]);
    }

    // Remove duplicates and exclude specific domains
    domains = [...new Set(domains)].filter(domain => !excludeList.includes(domain));

    return domains;
}

function initialize() {
  $('.block-button').click(e => {
    let target = $(e.currentTarget);
    let ip = target.attr('data-ip');
    let id = target.attr('data-id');
    let subject = $(`.message-row[data-id='${id}'] [data-type='message-subject']`).text();
    let message = $(`.message-row[data-id='${id}'] [data-type='message-body']`).text();
    let domains = extractDomains(`${subject} ${message}`);
    let url = `/admin/blacklist?type=ip&ip=${ip}`;

    if (confirm(`Are you sure you want to black list the this IP and domains: ${domains}`)){
      domains.forEach(domain => {
        let url = `/admin/blacklist?type=message&message=${domain}`;
        $.ajax({
          url: url,
          success: (result) => {
            alert(result);
          },
        });
      })
      $.ajax({
        url: url,
        success: (result) => {
          alert(result);
        },
      });
    }
  });

  $('.block-message').click(e => {
    let target = $(e.currentTarget);
    let message = $("#block-message").val().trim();
    let url = `/admin/blacklist?type=message&message=${message}`;

    if (message === ""){
      return;
    }

    if (confirm("Are you sure you want to black list the this message?")){
      $.ajax({
        url: url,
        success: (result) => {
          alert(result);
        },
      });
    }
  });
}

$(document).ready(() => {
  initialize();
});
</script>

{% endblock js %}
